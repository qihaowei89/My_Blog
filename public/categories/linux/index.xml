<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Qihao&#39; Blog</title>
    <link>/categories/linux/</link>
    <description>Recent content in linux on Qihao&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WIN10下linux子系统图形界面显示</title>
      <link>/posts/2019-12-4-win10%E4%B8%8Blinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-12-4-win10%E4%B8%8Blinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA/</guid>
      <description> 问题 在WIN10自带Linux子系统中运行Cytoscape等需要JAVA支持的有图形界面的软件时，系统会自动调取X11服务，但是在WIN10的bash中没有这个服务，所以在运行的时候会报错：
No X11 DISPLAY variable was set, but this program performed an operation which requires it.   解决  下载并安装WIN版的Xming
 进入WIN10的bash子系统中的命令行
 安装图形化驱动：sudo apt-get install x11-apps
 在程序前添加DISPLAY=:0,比如DISPLAY=:0 python plot_demo.py,或者将export DISPLAY=:0添加到~/.bashrc中   扩展: 在WIN10的linux的子系统中运行图形界面  安装GIMP,sudo apt-get install gimp
 安装xfce4,sudo apt-get install xfce4
 安装xubuntu桌面,sudo apt-get install xubuntu-desktop   </description>
    </item>
    
    <item>
      <title>docker 镜像制作</title>
      <link>/posts/docker-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/docker-%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/</guid>
      <description>###docker build构建本地镜像 第一步 下载基础ubuntu镜像
# size = 86.7 Mb docker pull ubuntu 第二步 构建本地镜像
参考链接
mkdir dockerfile cd dockerfile vim Dockerfile 在Dockerfile中编辑：
FROM ubuntu MAINTAINER by wqh RUN apt update RUN apt-get install -y r-base RUN apt-get install -y python RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/conda.sh &amp;amp;&amp;amp; \ /bin/bash ~/conda.sh -b -p /opt/conda &amp;amp;&amp;amp; \ rm ~/conda.sh &amp;amp;&amp;amp; \ echo &amp;quot;export PATH=/opt/conda/bin:$PATH&amp;quot; &amp;gt;&amp;gt; ~/.bashrc # &amp;lt;源路径&amp;gt;必须是上下文根目录的相对路径！&amp;lt;目标路径&amp;gt; 可以是容器内的绝对路径，也可以是相对路径 COPY &amp;lt;源路径&amp;gt; &amp;lt;目标路径&amp;gt; # ADD与COPY指令在功能上十分相似,&amp;lt;源路径&amp;gt;可以是一个指向一个网络文件的URL，这种情况下，Docker引擎会试图下载这个URL指向的文件到&amp;lt;目标路径&amp;gt;去。ADD指令如果 &amp;lt;源路径&amp;gt; 为一个tar压缩文件的话，ADD 指令将会自动解压缩这个压缩文件到 &amp;lt;目标路径&amp;gt; ADD &amp;lt;源路径&amp;gt; &amp;lt;目标路径&amp;gt; EXPOSE 80 开始构建docker镜像</description>
    </item>
    
  </channel>
</rss>